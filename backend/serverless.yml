service: letsdoprenup-backend

provider:
  name: aws
  runtime: nodejs18.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  environment:
    NODE_ENV: ${self:provider.stage}
    JWT_SECRET: ${env:JWT_SECRET, 'your-super-secret-jwt-key-change-in-production'}
    JWT_EXPIRES_IN: ${env:JWT_EXPIRES_IN, '7d'}
    FRONTEND_URL: ${env:FRONTEND_URL, 'http://localhost:3000'}
    # DynamoDB Configuration
    DYNAMODB_REGION: ${env:AWS_REGION, 'us-east-1'}
    DYNAMODB_TABLE_NAME: ${env:DYNAMODB_TABLE_NAME, 'letsdoprenup-data'}
    # For development, use local DynamoDB endpoint
    DYNAMODB_ENDPOINT: ${env:DYNAMODB_ENDPOINT, ''}
    # Email Configuration
    EMAIL_HOST: ${env:EMAIL_HOST, ''}
    EMAIL_PORT: ${env:EMAIL_PORT, '587'}
    EMAIL_USER: ${env:EMAIL_USER, ''}
    EMAIL_PASSWORD: ${env:EMAIL_PASSWORD, ''}
    # DocuSign Configuration
    DOCUSIGN_CLIENT_ID: ${env:DOCUSIGN_CLIENT_ID, ''}
    DOCUSIGN_CLIENT_SECRET: ${env:DOCUSIGN_CLIENT_SECRET, ''}
    DOCUSIGN_REDIRECT_URI: ${env:DOCUSIGN_REDIRECT_URI, ''}
    DOCUSIGN_ENVIRONMENT: ${env:DOCUSIGN_ENVIRONMENT, 'demo'}

functions:
  api:
    handler: dist/lambda.handler
    events:
      # Health check endpoint
      - http:
          path: /health
          method: get
          cors: true
      # All API routes
      - http:
          path: /api/{proxy+}
          method: any
          cors: true

plugins:
  - serverless-offline

custom:
  serverless-offline:
    httpPort: 3001
    lambdaPort: 3002
    # Use local DynamoDB for offline development
    env:
      DYNAMODB_ENDPOINT: http://localhost:8000
      AWS_ACCESS_KEY_ID: local
      AWS_SECRET_ACCESS_KEY: local

package:
  patterns:
    - 'dist/**'
    - 'node_modules/**'
    - '!src/**'
    - '!tests/**'
    - '!*.ts'
    - '!tsconfig.json'