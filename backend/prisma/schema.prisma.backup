generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  createdPrenups     Prenup[] @relation("CreatedPrenups")
  partnerPrenups     Prenup[] @relation("PartnerPrenups")
  partnerInvitations PartnerInvitation[]
  financialDisclosures FinancialDisclosure[]
  signatures         Signature[]

  @@map("users")
}

model Prenup {
  id          String      @id @default(cuid())
  title       String
  state       USState
  status      PrenupStatus @default(DRAFT)
  createdBy   String
  partnerId   String?
  progress    Json        @default("{}")
  content     Json        @default("{}")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relationships
  creator     User        @relation("CreatedPrenups", fields: [createdBy], references: [id])
  partner     User?       @relation("PartnerPrenups", fields: [partnerId], references: [id])
  documents   Document[]
  signatures  Signature[]
  disclosures FinancialDisclosure[]

  @@map("prenups")
}

model PartnerInvitation {
  id        String   @id @default(cuid())
  email     String
  prenupId  String
  invitedBy String
  token     String   @unique
  status    InvitationStatus @default(PENDING)
  createdAt DateTime @default(now())
  expiresAt DateTime

  // Relationships
  inviter   User     @relation(fields: [invitedBy], references: [id])

  @@map("partner_invitations")
}

model FinancialDisclosure {
  id       String @id @default(cuid())
  prenupId String
  userId   String
  assets   Json   @default("[]")
  debts    Json   @default("[]")
  income   Json   @default("{}")
  netWorth Decimal @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  prenup   Prenup @relation(fields: [prenupId], references: [id])
  user     User   @relation(fields: [userId], references: [id])

  @@unique([prenupId, userId], name: "prenupId_userId")
  @@map("financial_disclosures")
}

model Document {
  id        String     @id @default(cuid())
  prenupId  String
  type      DocumentType
  filename  String
  path      String
  size      Int
  mimeType  String
  createdAt DateTime   @default(now())

  // Relationships
  prenup    Prenup     @relation(fields: [prenupId], references: [id])

  @@map("documents")
}

model Signature {
  id        String     @id @default(cuid())
  prenupId  String
  userId    String
  docusignId String?
  status    SignatureStatus @default(PENDING)
  signedAt  DateTime?
  ipAddress String?
  createdAt DateTime   @default(now())

  // Relationships
  prenup    Prenup     @relation(fields: [prenupId], references: [id])
  user      User       @relation(fields: [userId], references: [id])

  @@map("signatures")
}

enum UserRole {
  USER
  ADMIN
}

enum USState {
  CALIFORNIA
  WASHINGTON
  NEW_YORK
  WASHINGTON_DC
  VIRGINIA
}

enum PrenupStatus {
  DRAFT
  IN_PROGRESS
  READY_FOR_REVIEW
  PENDING_SIGNATURES
  EXECUTED
  CANCELLED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
  CANCELLED
}

enum DocumentType {
  PRENUP_DRAFT
  PRENUP_FINAL
  FINANCIAL_STATEMENT
  SUPPORTING_DOCUMENT
}

enum SignatureStatus {
  PENDING
  SIGNED
  DECLINED
  EXPIRED
}